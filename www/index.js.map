{
  "version": 3,
  "sources": ["../build/live.js", "../code/say.ts", "../rooms/Room.ts", "../rooms/firstRoom.ts", "../code/room.ts", "../code/main.ts"],
  "sourcesContent": ["const port = 1235\nlet first = true\n\nfunction createSocket() {\n    const socket = new WebSocket(`ws://localhost:${port}`)\n    socket.addEventListener('message', data => {\n        window.location.reload()\n    })\n    socket.addEventListener('close', () => {\n        setTimeout(createSocket, 0)\n    })\n    socket.addEventListener('open', () => {\n        if (!first) {\n            window.location.reload()\n        } else {\n            first = false\n        }\n    })\n}\n\nwindow.addEventListener('load', () => {\n    createSocket()\n    console.log(`[RELOAD] Live reload listening on port ${port}...`)\n})", "export function clear(): void {\n    const body = document.querySelector('.body') as HTMLDivElement;\n    body.innerHTML = ''\n}\nexport function say(text: string): void {\n    const computerInput = document.querySelector('.body') as HTMLDivElement;\n    computerInput.innerHTML += `<div class=\"computer-input\">${text}</div>`;\n}\n\nexport function status(text: string): void {\n    const aboutText = document.querySelector('.about-text') as HTMLDivElement;\n    aboutText.innerHTML = text\n}\n\nexport function inventory(text: string): void {\n    const computerInput = document.querySelector('.inventory-text') as HTMLDivElement;\n    computerInput.innerHTML = text;\n}\n", "export abstract class Room {\n    abstract enter(): void;\n    abstract respond(text: string): void;\n}", "import { inventory, say, status } from '../code/say'\nimport { changeRoom } from '../code/room'\nimport { Room } from './Room'\n\nclass FirstRoom extends Room {\n    enter() {\n        status(\"Normal\");\n        inventory(\"\");\n        say(\"Hello! Welcome to (game name)! In this game, you will do stuff! The three places you can go (for now) are your house and the shop. Good luck!\");\n        say(\"Where do you want to go first? Your house or the shop? \");\n    }\n\n    respond(text: string) {\n        text = text.toLowerCase();\n        if (text.includes(\"shop\")) {\n            say(\"You decide to go to the shop!\");\n            say(\"Hello! Welcome to the shop! This is where you will buy and trade things!\");\n            say(\"You will start with $50.\");\n            say(\"Type 'talk to merchant' to talk to the merchant, or type 'leave shop' to leave the shop!\");\n        } else if (text.includes(\"talk to merchant\")) {\n            say(\"Merchant: Hello! I expect you are here to buy something? (respond with 'yes, buy' or 'no, not buy'.)\");\n        } else if (text.includes(\"yes, buy\")) {\n            say(\" Merchant: Nice! I see you have $50. You can afford to buy a tomato seed. Buy tomato seed? (respond with 'yes, buy tomato seed' or 'no, don't buy tomato seed'.)\");\n        } else if (text.includes(\"leave shop\")) {\n            say(\"You have left the shop.\");\n            say(\"Do you want to go to your house or the shop?\");\n        } else {\n            say(\"huh?\");\n        }\n    }\n}\n\nexport const firstRoom = new FirstRoom();", "import { firstRoom } from '../rooms/firstRoom';\nimport { Room } from '../rooms/Room';\nimport { clear } from './say';\n\nlet room: Room;\n\nexport function initRooms(): void {\n    firstRoom.enter();\n}\n\nexport function getRoom(): Room {\n    return room;\n}\n\nexport function changeRoom(newRoom: Room) {\n    clear()\n    room = newRoom\n    room.enter()\n}", "import { initRooms, getRoom } from './room'\nimport { inventory, say, status } from './say'\n\nlet body: HTMLBodyElement;\nlet input: HTMLInputElement;\n\nfunction keyup(e: KeyboardEvent): void {\n    if (e.code === 'Enter') {\n        say(`<div class=\"player-input\">${input.value}<div>`);\n        getRoom().respond(input.value);\n        input.value = '';\n        input.scrollIntoView({ behavior: \"smooth\", block: \"end\" });\n    }\n}\n\nwindow.onload = () => {\n    body = document.querySelector('.body') as HTMLBodyElement;\n    input = document.querySelector('.input') as HTMLInputElement;\n    input.focus();\n    input.addEventListener(\"keyup\", keyup);\n    input.addEventListener(\"blur\", () => input.focus());\n    status('Looking fine.');\n    inventory(\"Nothing.\");\n    initRooms();\n}"],
  "mappings": ";;AAAA,MAAM,OAAO;AACb,MAAI,QAAQ;AAEZ,0BAAwB;AACpB,UAAM,SAAS,IAAI,UAAU,kBAAkB,MAAM;AACrD,WAAO,iBAAiB,WAAW,UAAQ;AACvC,aAAO,SAAS,OAAO;AAAA,IAC3B,CAAC;AACD,WAAO,iBAAiB,SAAS,MAAM;AACnC,iBAAW,cAAc,CAAC;AAAA,IAC9B,CAAC;AACD,WAAO,iBAAiB,QAAQ,MAAM;AAClC,UAAI,CAAC,OAAO;AACR,eAAO,SAAS,OAAO;AAAA,MAC3B,OAAO;AACH,gBAAQ;AAAA,MACZ;AAAA,IACJ,CAAC;AAAA,EACL;AAEA,SAAO,iBAAiB,QAAQ,MAAM;AAClC,iBAAa;AACb,YAAQ,IAAI,0CAA0C,SAAS;AAAA,EACnE,CAAC;;;ACnBM,eAAa,MAAoB;AACpC,UAAM,gBAAgB,SAAS,cAAc,OAAO;AACpD,kBAAc,aAAa,+BAA+B;AAAA,EAC9D;AAEO,kBAAgB,MAAoB;AACvC,UAAM,YAAY,SAAS,cAAc,aAAa;AACtD,cAAU,YAAY;AAAA,EAC1B;AAEO,qBAAmB,MAAoB;AAC1C,UAAM,gBAAgB,SAAS,cAAc,iBAAiB;AAC9D,kBAAc,YAAY;AAAA,EAC9B;;;ACjBO,MAAe,OAAf,MAAoB;AAAA,EAG3B;;;ACCA,MAAM,YAAN,cAAwB,KAAK;AAAA,IACzB,QAAQ;AACJ,aAAO,QAAQ;AACf,gBAAU,EAAE;AACZ,UAAI,+IAA+I;AACnJ,UAAI,yDAAyD;AAAA,IACjE;AAAA,IAEA,QAAQ,MAAc;AAClB,aAAO,KAAK,YAAY;AACxB,UAAI,KAAK,SAAS,MAAM,GAAG;AACvB,YAAI,+BAA+B;AACnC,YAAI,0EAA0E;AAC9E,YAAI,0BAA0B;AAC9B,YAAI,0FAA0F;AAAA,MAClG,WAAW,KAAK,SAAS,kBAAkB,GAAG;AAC1C,YAAI,sGAAsG;AAAA,MAC9G,WAAW,KAAK,SAAS,UAAU,GAAG;AAClC,YAAI,kKAAkK;AAAA,MAC1K,WAAW,KAAK,SAAS,YAAY,GAAG;AACpC,YAAI,yBAAyB;AAC7B,YAAI,8CAA8C;AAAA,MACtD,OAAO;AACH,YAAI,MAAM;AAAA,MACd;AAAA,IACJ;AAAA,EACJ;AAEO,MAAM,YAAY,IAAI,UAAU;;;AC5BvC,MAAI;AAEG,uBAA2B;AAC9B,cAAU,MAAM;AAAA,EACpB;AAEO,qBAAyB;AAC5B,WAAO;AAAA,EACX;;;ACTA,MAAI;AACJ,MAAI;AAEJ,iBAAe,GAAwB;AACnC,QAAI,EAAE,SAAS,SAAS;AACpB,UAAI,6BAA6B,MAAM,YAAY;AACnD,cAAQ,EAAE,QAAQ,MAAM,KAAK;AAC7B,YAAM,QAAQ;AACd,YAAM,eAAe,EAAE,UAAU,UAAU,OAAO,MAAM,CAAC;AAAA,IAC7D;AAAA,EACJ;AAEA,SAAO,SAAS,MAAM;AAClB,WAAO,SAAS,cAAc,OAAO;AACrC,YAAQ,SAAS,cAAc,QAAQ;AACvC,UAAM,MAAM;AACZ,UAAM,iBAAiB,SAAS,KAAK;AACrC,UAAM,iBAAiB,QAAQ,MAAM,MAAM,MAAM,CAAC;AAClD,WAAO,eAAe;AACtB,cAAU,UAAU;AACpB,cAAU;AAAA,EACd;",
  "names": []
}
