{
  "version": 3,
  "sources": ["../build/live.js", "../rooms/Room.ts", "../code/inventory.ts", "../code/say.ts", "../rooms/firstRoom.ts", "../code/room.ts", "../code/main.ts"],
  "sourcesContent": ["const port = 1235\nlet first = true\n\nfunction createSocket() {\n    const socket = new WebSocket(`ws://localhost:${port}`)\n    socket.addEventListener('message', data => {\n        window.location.reload()\n    })\n    socket.addEventListener('close', () => {\n        setTimeout(createSocket, 0)\n    })\n    socket.addEventListener('open', () => {\n        if (!first) {\n            window.location.reload()\n        } else {\n            first = false\n        }\n    })\n}\n\nwindow.addEventListener('load', () => {\n    createSocket()\n    console.log(`[RELOAD] Live reload listening on port ${port}...`)\n})", "type Noun = Record<string, { say: string, do?: () => void }>;\n\nexport abstract class Room {\n    abstract handle(noun: string, verb: string): void;\n}", "const inventory = new Set();\n\nfunction getInventory() {\n    return Array.from(inventory);\n}\n\nexport function hasInventory(item: string): boolean {\n    return inventory.has(item);\n}\n\nfunction updateInventory() {\n    const items = getInventory();\n    let s = '';\n    for (const item of items) {\n        s += `<div>${item}</div>`;\n    }\n    const inventoryText = document.querySelector('.inventory-text') as HTMLDivElement;\n    inventoryText.innerHTML = s;\n}\n\nexport function addInventory(item: string): void {\n    inventory.add(item);\n    updateInventory();\n}\n\nexport function removeInventory(item: string): void {\n    inventory.delete(item);\n    updateInventory();\n}", "export function clear(): void {\n    const body = document.querySelector('.body') as HTMLDivElement;\n    body.innerHTML = ''\n}\nexport function say(text: string): void {\n    const computerInput = document.querySelector('.body') as HTMLDivElement;\n    computerInput.innerHTML += `<div class=\"computer-input\">${text}</div>`;\n}\n\nexport function status(text: string): void {\n    const aboutText = document.querySelector('.about-text') as HTMLDivElement;\n    aboutText.innerHTML = text\n}\n\nexport function inventory(text: string): void {\n    const computerInput = document.querySelector('.inventory-text') as HTMLDivElement;\n    computerInput.innerHTML = text;\n}\n", "import { Room } from './Room'\nimport { addInventory } from \"../code/inventory\";\nimport { say } from '../code/say';\nimport firstRoomData from \"./firstRoom.json\";\n\nclass FirstRoom extends Room {\n    berriesArePicked = false;\n\n    handle(noun: string, verb: string): void {\n        if (noun === \"berries\" && verb === \"pick\") {\n            if (this.berriesArePicked) {\n                say(\"You already have the berries.\");\n            } else {\n                addInventory(\"berries\");\n                this.berriesArePicked = true;\n            }\n        }\n\n        if (noun === \"road\" && verb === \"go\") {\n            //\n        }\n\n    }\n}\n\nexport const firstRoom = new FirstRoom();", "import { firstRoom } from '../rooms/firstRoom';\nimport { Room } from '../rooms/Room';\nimport { clear } from './say';\n\nlet room: Room;\n\nexport function initRooms(): void {\n    firstRoom.enter();\n}\n\nexport function getRoom(): Room {\n    return room;\n}\n\nexport function changeRoom(newRoom: Room) {\n    clear()\n    room = newRoom\n    room.enter()\n}", "import { initRooms, getRoom } from './room'\nimport { inventory, status } from './say'\n\nlet body: HTMLBodyElement;\n\nwindow.onload = () => {\n    body = document.querySelector('.body') as HTMLBodyElement;\n    inventory(\"Nothing.\");\n    status('Looking fine.');\n    initRooms();\n}"],
  "mappings": ";;AAAA,MAAM,OAAO;AACb,MAAI,QAAQ;AAEZ,0BAAwB;AACpB,UAAM,SAAS,IAAI,UAAU,kBAAkB,MAAM;AACrD,WAAO,iBAAiB,WAAW,UAAQ;AACvC,aAAO,SAAS,OAAO;AAAA,IAC3B,CAAC;AACD,WAAO,iBAAiB,SAAS,MAAM;AACnC,iBAAW,cAAc,CAAC;AAAA,IAC9B,CAAC;AACD,WAAO,iBAAiB,QAAQ,MAAM;AAClC,UAAI,CAAC,OAAO;AACR,eAAO,SAAS,OAAO;AAAA,MAC3B,OAAO;AACH,gBAAQ;AAAA,MACZ;AAAA,IACJ,CAAC;AAAA,EACL;AAEA,SAAO,iBAAiB,QAAQ,MAAM;AAClC,iBAAa;AACb,YAAQ,IAAI,0CAA0C,SAAS;AAAA,EACnE,CAAC;;;ACrBM,MAAe,OAAf,MAAoB;AAAA,EAE3B;;;ACJA,MAAM,YAAY,oBAAI,IAAI;AAE1B,0BAAwB;AACpB,WAAO,MAAM,KAAK,SAAS;AAAA,EAC/B;AAMA,6BAA2B;AACvB,UAAM,QAAQ,aAAa;AAC3B,QAAI,IAAI;AACR,eAAW,QAAQ,OAAO;AACtB,WAAK,QAAQ;AAAA,IACjB;AACA,UAAM,gBAAgB,SAAS,cAAc,iBAAiB;AAC9D,kBAAc,YAAY;AAAA,EAC9B;AAEO,wBAAsB,MAAoB;AAC7C,cAAU,IAAI,IAAI;AAClB,oBAAgB;AAAA,EACpB;;;ACnBO,eAAa,MAAoB;AACpC,UAAM,gBAAgB,SAAS,cAAc,OAAO;AACpD,kBAAc,aAAa,+BAA+B;AAAA,EAC9D;AAEO,kBAAgB,MAAoB;AACvC,UAAM,YAAY,SAAS,cAAc,aAAa;AACtD,cAAU,YAAY;AAAA,EAC1B;AAEO,sBAAmB,MAAoB;AAC1C,UAAM,gBAAgB,SAAS,cAAc,iBAAiB;AAC9D,kBAAc,YAAY;AAAA,EAC9B;;;ACZA,MAAM,YAAN,cAAwB,KAAK;AAAA,IAA7B;AAAA;AACI,8BAAmB;AAAA;AAAA,IAEnB,OAAO,MAAc,MAAoB;AACrC,UAAI,SAAS,aAAa,SAAS,QAAQ;AACvC,YAAI,KAAK,kBAAkB;AACvB,cAAI,+BAA+B;AAAA,QACvC,OAAO;AACH,uBAAa,SAAS;AACtB,eAAK,mBAAmB;AAAA,QAC5B;AAAA,MACJ;AAEA,UAAI,SAAS,UAAU,SAAS,MAAM;AAAA,MAEtC;AAAA,IAEJ;AAAA,EACJ;AAEO,MAAM,YAAY,IAAI,UAAU;;;ACnBhC,uBAA2B;AAC9B,cAAU,MAAM;AAAA,EACpB;;;ACLA,MAAI;AAEJ,SAAO,SAAS,MAAM;AAClB,WAAO,SAAS,cAAc,OAAO;AACrC,eAAU,UAAU;AACpB,WAAO,eAAe;AACtB,cAAU;AAAA,EACd;",
  "names": []
}
